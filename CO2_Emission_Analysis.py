# -*- coding: utf-8 -*-
"""ML_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zv34_wx6OTIp2ONfLPXke3AXA01Wg3cM

# Part 1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc, balanced_accuracy_score
from sklearn.metrics import mean_absolute_error,mean_squared_error, r2_score
from sklearn.metrics import top_k_accuracy_score

df = pd.read_csv('Agrofood_co2_emission.csv')
df

df.shape

df.columns

df.info()

df.describe()

df.isnull().sum()

df.fillna(df.mean())
df.shape

df.replace(np.nan , df.mean(), inplace = True)

df.duplicated().sum()

df.groupby('Year')['Average Temperature °C'].sum().plot()

"""The total emission of CO2 shows an upward trend, it increases year by year.

The Average rise in temperature also shows an upward trend with time
"""

df.groupby('Area')['total_emission'].sum().sort_values(ascending=False).head(20).plot.bar()

"""This shows tha Asian countries contribute the most in CO2 emission, China leading by a huge margin"""

df.groupby('Area')['total_emission'].sum().sort_values(ascending=True).head(20).plot.bar()

"""this shows that Russia has contributed the least in the emission of CO2"""

sns.lineplot(data=df[(df['Area']=='Russian Federation')|(df['Area']=='China')],x='Year',y='Average Temperature °C',hue='Area')

"""Although the Average Temperature change in Russia is greater than that of China still it has very less CO2 Emission"""

le = LabelEncoder()
df['Area'] = le.fit_transform(df['Area'])
df

data = df.corr()

plt.figure(figsize=(30, 20))
heatmap = sns.heatmap(data, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.8)
heatmap.set_xticklabels(heatmap.get_xticklabels(), rotation=65, horizontalalignment='right')

plt.title('Correlation Heatmap')

print(data['Average Temperature °C'].sort_values())

def correlation(data, threshold):
    col_corr = set()
    corr_matrix = data.corr()['Average Temperature °C']
    for i in range(len(corr_matrix)):
        if abs(corr_matrix.iloc[i]) >= threshold:
            colname = corr_matrix.index[i]
            col_corr.add(colname)
    return col_corr

corr_features = correlation(df, 0.04)
dataset = df[corr_features]
dataset

dataset.shape

dataset.columns

for col in dataset.columns:
    sns.scatterplot(x = col, y = dataset.columns[-2], data = dataset)
    plt.title(f"Scatterplot of {col} vs. {dataset.columns[-2]}")
    plt.show()

dataset

x = dataset.drop('Average Temperature °C', axis = 1)
y = dataset['Average Temperature °C']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)

x_train.head()

ss = StandardScaler()
x_train = ss.fit_transform(x_train)
x_test = ss.transform(x_test)
x_train = pd.DataFrame(x_train)

x_train.head()

def calculate_regression_metrics(y_true, y_pred):

    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)

    metrics_dict = {
        'MSE': mse,
        'RMSE': rmse,
        'MAE': mae,
        'R2': r2
    }

    return metrics_dict

lr = LinearRegression()
model = lr.fit(x_train,y_train)
pred = model.predict(x_test)
print(pred)

sns.regplot(x = y_test, y = pred, ci = None, color = 'green')

result = calculate_regression_metrics(y_test, pred)
print(result)

from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor()
model.fit(x_train, y_train)
pred = model.predict(x_test)

sns.regplot(x = y_test, y = pred, ci = None, color = 'green')

result = calculate_regression_metrics(y_test, pred)
print(result)

from sklearn.ensemble import AdaBoostRegressor

model = AdaBoostRegressor()
model.fit(x_train, y_train)
pred = model.predict(x_test)

sns.regplot(x = y_test, y = pred, ci = None, color = 'green')

result = calculate_regression_metrics(y_test, pred)
print(result)

from xgboost import XGBRegressor

model = XGBRegressor()
model.fit(x_train, y_train)
pred = model.predict(x_test)

sns.regplot(x = y_test, y = pred, ci = None, color = 'green')

result = calculate_regression_metrics(y_test, pred)
print(result)

from sklearn.ensemble import GradientBoostingRegressor

model = XGBRegressor()
model.fit(x_train, y_train)
pred = model.predict(x_test)

sns.regplot(x = y_test, y = pred, ci = None, color = 'green')

result = calculate_regression_metrics(y_test, pred)
print(result)

"""# Other Working

"""

df = pd.read_csv("Agrofood_co2_emission.csv")
df

df.fillna(df.mean())

df.replace(np.nan , df.mean(), inplace = True)

df.shape

df.isna().sum()

df

df.drop('Area', axis = 1, inplace = True)

df

df = df.round()

df

df['Average Temperature °C'].value_counts()
sns.countplot(x = 'Average Temperature °C',data = df, palette = 'RdBu_r')

df['Average Temperature °C'] = df['Average Temperature °C'].replace(4, 3)

df['Average Temperature °C'].value_counts()

y = df['Average Temperature °C']
from imblearn.combine import SMOTETomek
smk = SMOTETomek (random_state = 42)
xdata, ydata = smk.fit_resample(df, y)
xdata.shape, ydata.shape
from collections import Counter
print('original shape {}'.format(Counter(y)))
print('resampled shape {}'.format(Counter(ydata)))

plt.figure(figsize=(6, 4))
sns.countplot(x='Average Temperature °C', data=pd.DataFrame({'Average Temperature °C': ydata}), palette='RdBu_r')
plt.title('Resampled Class Distribution')
plt.show()

y = ydata
x = xdata
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report


rf = RandomForestClassifier()
rf.fit(x_train, y_train)
print('number of trees used: ', rf.n_estimators)
pred = rf.predict(x_test)
acc1 = accuracy_score(y_test, pred)
acc1 *= 100
print('accuracy is: ', acc1)

from sklearn.ensemble import AdaBoostClassifier
model = AdaBoostClassifier(random_state = 42)
model.fit(x_train, y_train)
print('number of trees used: ', model.n_estimators)
pred = model.predict(x_test)
acc1 = accuracy_score(y_test, pred)
acc1 *= 100
print('accuracy is: ', acc1)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

def evaluate_model(model, x_test, y_test):
    # Make predictions
    y_pred = model.predict(x_test)

    # Evaluate accuracy
    acc = accuracy_score(y_test, y_pred)

    # Evaluate precision, recall, and F1 score
    # Choose the appropriate 'average' setting based on your requirements
    prec = precision_score(y_test, y_pred, average='weighted')
    rec = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')

    return acc, prec, rec, f1

# Evaluating Random Forest
rf_acc, rf_prec, rf_rec, rf_f1 = evaluate_model(rf, x_test, y_test)
print("******Random Forest******")
print(f"Accuracy: {rf_acc*100:.4f}")
print(f"Precision: {rf_prec*100:.4f}")
print(f"Recall: {rf_rec*100:.4f}")
print(f"F1 Score: {rf_f1*100:.4f}")

"""# Part 3"""

df['Total Population'] = df['Rural population'] + df['Urban population']
df['Fire Emission'] = df['Savanna fires'] + df['Forest fires'] + df['Fires in organic soils'] + df['Fires in humid tropical forests']
df['Agriculture Activites'] = df['Crop Residues'] + df['Rice Cultivation'] + df['Drained organic soils (CO2)'] + df['Pesticides Manufacturing'] + df['Fertilizers Manufacturing'] + df['Manure Management'] + df['Manure applied to Soils'] + df['Manure left on Pasture']
df['Food Activities'] = df['Food Transport'] + df['Food Retail'] + df['Food Household Consumption'] + df['Food Packaging'] + df['Agrifood Systems Waste Disposal'] + df['Food Processing']
df['Land and Forestry'] = df['Forestland'] + df['Net Forest conversion']
df['Energy Use'] = df['On-farm Electricity Use'] + df['On-farm energy use']


df = df[['Total Population', 'Fire Emission', 'Agriculture Activites', 'Food Activities', 'Land and Forestry', 'Energy Use', 'Average Temperature °C']]
df['Total Emission'] = df['Fire Emission'] + df['Agriculture Activites'] + df['Food Activities'] + df['Land and Forestry'] + df['Energy Use']


corr = df.corr()


plt.figure(figsize=(8, 6))
heatmap = sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.8)
heatmap.set_xticklabels(heatmap.get_xticklabels(), rotation=65, horizontalalignment='right')

plt.title('Correlation Heatmap')

for col in df.columns:
    sns.scatterplot(x=col, y=df.columns[-2], data=df)
    plt.title(f"Scatterplot of {col} vs. {df.columns[-2]}")
    plt.show()

x = df.drop('Average Temperature °C', axis = 1)
y = df['Average Temperature °C']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)

x_train.head()

mm = MinMaxScaler()
x_train = mm.fit_transform(x_train)
x_test = mm.transform(x_test)
x_train = pd.DataFrame(x_train)
x_test = pd.DataFrame(x_test)

x_train.head()

from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor()
model.fit(x_train, y_train)
pred = model.predict(x_test)

result = calculate_regression_metrics(y_test, pred)
print(result)

teac = r2_score(y_test, pred)
teac = teac * 100
print(teac)



